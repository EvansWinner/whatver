#!/usr/bin/env python3

import os
import sys

# This is updated automatically by git pre-commit hook to be the
# current git revision number.
version="19"

dict = {

  # Add new ones below. Don't forget the comma at the end of each
  # line, and please alphabetize them.
  
  "SYSTEM": "uname -srvmpio",
  "awk": "awk --version | head -1  2>&1",
  "bash": "bash --version | head -1 2>&1",
  "bc": "bc --version | head -1 2>&1",
  "cat": "cat --version | head -1 2>&1",
  "cc": "cc --version | head -1 2>&1",
  "cmp": "cmp --version | head -1 2>&1",
  "comm": "comm --version | head -1 2>&1",
  "curl": "curl --version | head -1 2>&1",
  "cut": "cut --version | head -1 2>&1",
  "emacs": "emacs --version | head -1 2>&1",
  "factor": "factor --version | head -1 2>&1",
  "fmt": "fmt --version | head -1 2>&1",
  "fold": "fold --version | head -1 2>&1",
  "gcc": "gcc --version | head -1 2>&1",
  "gnuplot": "gnuplot --version 2>&1",
  "graph-easy": "graph-easy --version | grep 'Graph::Easy'",
  "grep": "grep --version | head -1 2>&1",
  "groff": "groff --version | head -1 2>&1",
  "head": "head --version | head -1 2>&1",
  "kallychore": "kallychore -v 2>&1",
  "latex": "latex --version | grep 'Compiled with\\|3.14\\|version' 2>&1",
  "make": "make --version | head -1 2>&1",
  "mv": "mv --version | head -1 2>&1",
  "pandoc": "pandoc --version | head -1 2>&1",
  "paste": "paste --version | head -1 2>&1",
  "perl": "perl --version | grep -o 'perl .,.*'",
  "pic": "pic --version 2>&1",
  "python": "python --version 2>&1",
  "python3": "python3 --version 2>&1",
  "sed": "sed --version | head -1 2>&1",
  "seq": "seq --version | head -1 2>&1",
  "sort": "sort --version | head -1 2>&1",
  "tail": "tail --version | head -1 2>&1",
  "tex": "tex --version | head -1 2>&1",
  "touch": "touch --version | head -1 2>&1",
  "tr": "tr --version | head -1 2>&1",
  "uniq": "uniq --version | head -1 2>&1",
  "wc": "wc --version | head -1 2>&1",
  "whatver": "whatver --version 2>&1",
}


def use_msg():
  print ("Usage: whatver program [otherprograms ... ]")

def help_msg():
  use_msg()
  print ("Help: whatver -h")
  print ("Version: whatver -v")
  
if len(sys.argv) > 1:
  args = sys.argv[1:]
else:
  use_msg()
  sys.exit()

if args[0] in ("-h", "-H", "--help", "-help", "-?"):
  help_msg()
  sys.exit()

if args[0] in ("--version", "-v", "-V", "-version"):
  print("whatver version (git revision)", version)
  sys.exit()

for p in args:
  if p in dict:
    print(end='', flush=True)
    os.system(dict[p])
  else:
    print("whatver: ", "\"", p, "\" not in program list.", sep="")
    break
